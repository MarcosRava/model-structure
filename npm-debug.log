0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/node', '/usr/bin/npm', 'publish' ]
2 info using npm@1.4.23
3 info using node@v0.10.31
4 verbose node symlink /usr/bin/node
5 verbose publish [ '.' ]
6 verbose cache add [ '.', null ]
7 verbose cache add name=undefined spec="." args=[".",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: '.',
8 verbose parsed url   path: '.',
8 verbose parsed url   href: '.' }
9 silly lockFile 3a52ce78- .
10 verbose lock . /home/likewise-open/OCTO/mvieira/.npm/3a52ce78-.lock
11 verbose tar pack [ '/home/likewise-open/OCTO/mvieira/.npm/model-structure/1.0.0/package.tgz',
11 verbose tar pack   '.' ]
12 verbose tarball /home/likewise-open/OCTO/mvieira/.npm/model-structure/1.0.0/package.tgz
13 verbose folder .
14 info prepublish model-structure@1.0.0
15 silly lockFile 1f1177db-tar tar://.
16 verbose lock tar://. /home/likewise-open/OCTO/mvieira/.npm/1f1177db-tar.lock
17 silly lockFile 77fda5b8-odel-structure-1-0-0-package-tgz tar:///home/likewise-open/OCTO/mvieira/.npm/model-structure/1.0.0/package.tgz
18 verbose lock tar:///home/likewise-open/OCTO/mvieira/.npm/model-structure/1.0.0/package.tgz /home/likewise-open/OCTO/mvieira/.npm/77fda5b8-odel-structure-1-0-0-package-tgz.lock
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 1f1177db-tar tar://.
21 silly lockFile 77fda5b8-odel-structure-1-0-0-package-tgz tar:///home/likewise-open/OCTO/mvieira/.npm/model-structure/1.0.0/package.tgz
22 silly lockFile 77fda5b8-odel-structure-1-0-0-package-tgz tar:///home/likewise-open/OCTO/mvieira/.npm/model-structure/1.0.0/package.tgz
23 silly lockFile e9c0604d-pm-model-structure-1-0-0-package /home/likewise-open/OCTO/mvieira/.npm/model-structure/1.0.0/package
24 verbose lock /home/likewise-open/OCTO/mvieira/.npm/model-structure/1.0.0/package /home/likewise-open/OCTO/mvieira/.npm/e9c0604d-pm-model-structure-1-0-0-package.lock
25 silly lockFile e9c0604d-pm-model-structure-1-0-0-package /home/likewise-open/OCTO/mvieira/.npm/model-structure/1.0.0/package
26 silly lockFile e9c0604d-pm-model-structure-1-0-0-package /home/likewise-open/OCTO/mvieira/.npm/model-structure/1.0.0/package
27 silly lockFile 3a52ce78- .
28 silly lockFile 3a52ce78- .
29 silly publish { author: { name: 'Marcos Rava', email: 'marcosrava@gmail.com' },
29 silly publish   contributors:
29 silly publish    [ { name: 'Fabrício Ferrari de Campos',
29 silly publish        email: 'ffc.fabricio@gmail.com',
29 silly publish        url: 'http://vizir.com.br/' },
29 silly publish      { name: 'Romário da Silva Lima',
29 silly publish        email: 'r.lima616@gmail.com',
29 silly publish        url: 'http://airroom.com.br/' } ],
29 silly publish   name: 'model-structure',
29 silly publish   version: '1.0.0',
29 silly publish   repository: { url: 'https://github.com/MarcosRava/model-structure/' },
29 silly publish   main: './index.js',
29 silly publish   bugs: { url: 'https://github.com/MarcosRava/model-structure/issues' },
29 silly publish   keywords: [ 'swagger', 'models', 'schema', 'db-migrate' ],
29 silly publish   description: 'Models based on schema',
29 silly publish   dependencies:
29 silly publish    { async: '^0.9.0',
29 silly publish      'async-validate': '^0.1.20',
29 silly publish      'db-migrate': '^0.7.1',
29 silly publish      extend: '^1.2.1',
29 silly publish      moment: '^2.6.0' },
29 silly publish   scripts:
29 silly publish    { test: 'mocha',
29 silly publish      build: 'gulp build',
29 silly publish      cover: './node_modules/mocha/bin/mocha -R html-cov --require blanket > coverage.html' },
29 silly publish   engines: { node: '*' },
29 silly publish   config: { blanket: { 'data-cover-never': 'node_modules', pattern: 'src' } },
29 silly publish   devDependencies:
29 silly publish    { blanket: '^1.1.6',
29 silly publish      'expect.js': '^0.3.1',
29 silly publish      gulp: '^3.7.0',
29 silly publish      'gulp-browserify': '^0.5.0',
29 silly publish      'gulp-concat': '^2.2.0',
29 silly publish      'gulp-if': '^1.2.1',
29 silly publish      'gulp-livereload': '^2.0.0',
29 silly publish      'gulp-uglify': '^0.3.0',
29 silly publish      mocha: '^1.20.0',
29 silly publish      'tiny-lr': '0.0.7',
29 silly publish      underscore: '^1.7.0' },
29 silly publish   readme: '#Model Structure\n\n`model-structure` helps you to create Models based on a Schema\'s Object. :godmode:\n\nIt can:\n\n* Set a custom repository to create, update, get and delete\n* Get Swagger models\n* Get db-migrate JSON\n* Nested objects support (validations too!)\n* Call validations before create, update or standalone\n* Custom async validations based on Schema\n* Custom validation messages, by validation or attribute\n\n---\n\n\n1. [Installation](#installation)\n2. [Usage](#usage)\n  - [Schema Declaration](#schema-declaration)\n  - [Using Repositories](#using-repositories)\n  - [Validating Models](#validating-models)\n  - [Swagger](#swagger)\n  - [Node DB Migrate](#node-db-migrate)\n  - [Messages](#messages)\n  - [Data/Object Definition](#dataobject-definition)\n    -  [Data Types](#data-types)\n    -  [ENUM Object](#enum-object)\n    -  [Model Ref Object](#model-ref-object)\n3. [Browser Support](#browser-support)\n4. [Running Tests](#running-tests)\n\n## Installation\n```sh\n$ npm install model-structure\n```\n\n## `Model.init(constructor, schema)`;\n Used to bind prototype properties in object constructor\n\n * `constructor` - Object constructor\n * `schema` - object [schema](#schema-declaration) with properties details\n\n## `Model.instantiate(instance, data, options)`;\n Used inside object constructor\n\n * `instance` - `this` reference\n * `data` - object data attributes\n * `options` - Model options\n   - ### options\n\n     - `repository` - [Repository Object](#using-repositories) - contains object with crud functions\n     - `validator`- [Validators Array](#custom-validations) - an array with validators to be used against object data\n\n## Usage\n[Sample object](/test/fixtures/models/customer.js)\n```js\n\nvar Model = require(\'model-structure\');\n\nfunction Lead(args, options) {\n  Model.instantiate(this, args, options);\n}\n\nvar schema = {\n  properties: {\n    "id" : {\n      "type": "integer",\n      "primaryKey": true,\n      "autoIncrement": true\n    },\n    "name" : {\n      "type": "string",\n      "maximum": 30\n    },\n    "email" : {\n      "type": "email",\n      "message": "%s field is not a valid email!!",\n    },\n  }\n}\nModel.init(Lead, schema);\n\n\nvar data = {name: \'Kurosaki Ichigo\', email: \'ichi@soulsociety.com\'};\nvar lead = new Lead(data);\nlead.create(function(err, leadResponse) {\n  // return created lead\n});\n```\n\n### Schema Declaration\n\n```js\nvar schema = {};\n```\n\n#### `schema.messages = {}`\n\nSchema error messages based on [Data Type](#data-types).\n\n```js\nschema.messages = {\n  "integer": "Integer error message",\n  "float": "Float error message",\n}\n```\n\n#### `schema.notInstantiate = false`\n\nIf `true`, gets exactly the return data from Repository.\n\n#### `schema.properties = {}`\n\nProperty | Type | Description\n-------- | ---- | -----------\n`type` |  [`String - Data Type`](#data-types) | **Required**.\n`primaryKey` | `Boolean` |\n`autoIncrement` | `Boolean` |\n`minimum` | `Number` | If `type` is a `Number`, minimum value. If it\'s a `String`, minimum length.\n`maximum` | `Number` | If `type` is a `Number`, maximum value. If it\'s a `String`, maximum length.\n`values` | [`Object - ENUM`](#enum-object) | .\n`model` | [`Object - Model Ref`](#model-ref-object) |\n\n```js\nschema.properties = {\n  "id": {\n    "type": "integer",\n    "primaryKey": true,\n    "autoIncrement": true\n  }\n}\n```\n\n### Using Repositories\n\nThe Model calls repository\'s functions passing object with `this` context.\n\n```js\nvar datas = {};\n// Simple repository to use memory to save data\n\nfunction Repository() {\n  Repository.prototype.create = function create(callback) {\n    this.id = new Date().getTime();\n    datas[this.id] = this;\n    if (typeof callback === \'function\') callback(null, this);\n  };\n\n  Repository.prototype.get = function get(args, callback) {\n    var data = [];\n    for (var i in datas) data.push(JSON.parse(JSON.stringify(datas[i])));\n    callback(null, data);\n  };\n\n  Repository.prototype.load = function load(args, callback) {\n    args = args || {};\n    var data = args.data || {};\n    if (args.id) {\n      data = datas[args.id];\n    }\n    callback(null, data);\n  };\n\n  Repository.prototype.update = function update(callback) {\n    datas[this.id] = this;\n    if (typeof callback === \'function\') callback(null, this);\n  };\n\n  Repository.prototype.destroy = function destroy(callback) {\n    delete datas[this.id];\n    if (typeof callback === \'function\') callback(null, this);\n  };\n}\n\nvar data = {name: \'Kurosaki Ichigo\', email: \'ichi@soulsociety.com\'};\nvar options = {};\noptions.repository = new Repository();\nvar lead = new Lead(data, options);\nlead.create(function(err, leadResponse) {\n  lead.load({id:lead.id}, function (err, secondResponse) {\n    // get saved lead;\n  });\n});\n```\n\n### Validating Models\nThe validations methods are fired before `create` or `update` methods. But you may trigger it directly:\n```js\nvar data = {name: \'Kurosaki Ichigo\', email: \'ichi@soulsociety.com\'};\noptions.repository = new Repository();\nvar lead = new Lead(data, options);\nlead.isValid(function(err, fields) {\n\n});\n```\n\n### Custom Validations\n```js\nvar Validator = Model.Validator;\nvar validators = [];\nvar validator = new Validator({validate: firstLetterLowerCase});\nvar expect = require(\'expect.js\');\nvar error = {message: "Name field must be first letter in lowercase", field: \'name\'};;\n\nfunction firstLetterLowerCase(done) {\n  if (this.name[0].toLowerCase() === this.name[0]) {\n    done();\n  } else {\n    done(error);\n  }\n}\nvalidators.push(validator);\nlead.isValid(validators, function (err) {\n  expect(err[0].field).to.be(error.field);\n  expect(err[0].message).to.contain(error.message);\n  done();\n});\n// OR\nValidator.validate(lead, validators, function (err) {\n  expect(err[0].field).to.be(error.field);\n  expect(err[0].message).to.contain(error.message);\n  done();\n});\n```\n//TODO More examples\n\n### Swagger\n\nGet Swagger Model schema\n```js\nvar swaggerSchema = {\n  "apiVersion": "0.0.1",\n  "swaggerVersion": "1.2",\n  "basePath": "http://localhost:1214",\n  "resourcePath": "/lead",\n  "apis": [{\n    "path": "/lead/",\n    "operations": [{\n      "description": "Get all leads",\n      "notes": "Returns all leads.",\n      "summary": "Get leads",\n      "method": "GET",\n      "type": "Lead",\n      "nickname": "getAllLeads"\n    }]\n  }],\n  "models": Lead.access(\'swagger\')\n  }\n}\n```\n\n### Node DB Migrate\nIf you are using [node-db-migrate](https://github.com/kunklejr/node-db-migrate) to manager your migrations, you can get the migration schema directly from `Model.getSchema(\'dbMigrate\', [YOUR_SCHEMA])`.\n```js\n  var schema = {\n    "properties": {\n      "id" : {\n        "type": "integer",\n        "primaryKey": true,\n        "autoIncrement": true\n      },\n      "name" : {\n        "type": "string",\n        "minimum": 3,\n        "maximum": 30\n      },\n      "email" : {\n        "type": "email",\n        "required": true,\n        "unique": true,\n        "minimum": 7\n      }\n    }\n  }\n  Model.getSchema(\'dbMigrate\', schema); // returns the node-db-migrate schema\n```\n\n### Messages\n\nAdd custom error messages to field or validation\n\n```js\n  var expect = require(\'expect.js\');\n  var lead = new Lead({id:"not a valid integer"});\n  Model.addMessages(\'pt-BR\', {types: {integer: "%s não é um inteiro"}});\n  Model.setLocale(\'pt-BR\');\n  lead.isValid(function (err) {\n    expect(err[0].field).to.be(\'id\');\n    expect(err[0].message).to.contain(\'id não é um inteiro\');\n    Model.setLocale(\'en\');\n    lead.isValid(function (err2) {\n      expect(err2[0].field).to.be(\'active\');\n      expect(err2[0].message).to.contain(\'id is not an integer\');\n    });\n  });\n\n```\n\n### Data/Object Definition\n\n#### Data Types\n\nCurrently Supported Datatypes:\n\n* `String`\n* `Char`\n* `Decimal`\n* `Float`\n* `Integer`\n* `Boolean`\n* `Date`\n* `Datetime`\n* `Enum`\n* `Array`\n* `Email`\n* `Nested Objects`\n\n#### ENUM Object\n\nProperty | Type | Description\n-------- | ---- | -----------\n`ref` | `Array/Object` | Reference Values\n`type` | [`String - Data Type`](#data-types) |\n\n#### Model Ref Object\n\nProperty | Type | Description\n-------- | ---- | -----------\n`ref` | `Object - Model Structure` | A `Model Structure` instance\n\n## Browser Support\n\nYou can use on client-side too!\n\n![IE](https://cloud.githubusercontent.com/assets/398893/3528325/20373e76-078e-11e4-8e3a-1cb86cf506f0.png) | ![Chrome](https://cloud.githubusercontent.com/assets/398893/3528328/23bc7bc4-078e-11e4-8752-ba2809bf5cce.png) | ![Firefox](https://cloud.githubusercontent.com/assets/398893/3528329/26283ab0-078e-11e4-84d4-db2cf1009953.png) | ![Opera](https://cloud.githubusercontent.com/assets/398893/3528330/27ec9fa8-078e-11e4-95cb-709fd11dac16.png) | ![Safari](https://cloud.githubusercontent.com/assets/398893/3528331/29df8618-078e-11e4-8e3e-ed8ac738693f.png)\n--- | --- | --- | --- | ---\nIE 9+ ✔ | Latest ✔ | Latest ✔ | Latest ✔ | Latest ✔\n\n## Running Tests\n\n  To run the test suite, first invoke the following command within the repo, installing the development dependencies:\n\n```bash\n$ npm install\n```\n\n  Then run the tests:\n\n```bash\n$ npm test\n```\n\n  To run the coverage report:\n\n```bash\n$ npm run cover\n```\n',
29 silly publish   readmeFilename: 'README.md',
29 silly publish   gitHead: 'fed2e7f34ad8069e4ed71ef9cc0964ee8a9f31a1',
29 silly publish   _id: 'model-structure@1.0.0',
29 silly publish   _shasum: '3ee4d3d8c04bb323efe074a3e40d93757ecc3dbb',
29 silly publish   _from: '.' }
30 verbose request where is /model-structure
31 verbose request registry https://registry.npmjs.org/
32 verbose request id efc97065a34c1299
33 verbose url raw /model-structure
34 verbose url resolving [ 'https://registry.npmjs.org/', './model-structure' ]
35 verbose url resolved https://registry.npmjs.org/model-structure
36 verbose request where is https://registry.npmjs.org/model-structure
37 info trying registry request attempt 1 at 11:19:07
38 http PUT https://registry.npmjs.org/model-structure
39 http 403 https://registry.npmjs.org/model-structure
40 verbose headers { date: 'Mon, 15 Sep 2014 14:19:09 GMT',
40 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R14B04)',
40 verbose headers   'content-type': 'application/json',
40 verbose headers   'cache-control': 'max-age=60',
40 verbose headers   'content-length': '15413',
40 verbose headers   'accept-ranges': 'bytes',
40 verbose headers   via: '1.1 varnish',
40 verbose headers   'x-served-by': 'cache-iad2124-IAD',
40 verbose headers   'x-cache': 'MISS',
40 verbose headers   'x-cache-hits': '0',
40 verbose headers   'x-timer': 'S1410790749.063904,VS0,VE819',
40 verbose headers   'keep-alive': 'timeout=10, max=50',
40 verbose headers   connection: 'Keep-Alive' }
41 error publish Failed PUT 403
42 error Error: forbidden cannot modify pre-existing version: 1.0.0
42 error old={"author":{"name":"Marcos Rava","email":"marcosrava@gmail.com"},"contributors":[{"name":"Fabrício Ferrari de Campos","email":"ffc.fabricio@gmail.com","url":"http://vizir.com.br/"},{"name":"Romário da Silva Lima","email":"r.lima616@gmail.com","url":"http://airroom.com.br/"}],"name":"model-structure","version":"1.0.0","repository":{"url":"https://github.com/MarcosRava/model-structure/"},"main":"./index.js","bugs":{"url":"https://github.com/MarcosRava/model-structure/issues"},"keywords":["swagger","models","schema","db-migrate"],"description":"Models based on schema","dependencies":{"async":"^0.9.0","async-validate":"^0.1.20","db-migrate":"^0.7.1","extend":"^1.2.1","moment":"^2.6.0"},"scripts":{"test":"mocha","build":"gulp build","cover":"./node_modules/mocha/bin/mocha -R html-cov --require blanket > coverage.html"},"engines":{"node":"*"},"config":{"blanket":{"data-cover-never":"node_modules","pattern":"src"}},"devDependencies":{"blanket":"^1.1.6","expect.js":"^0.3.1","gulp":"^3.7.0","gulp-browserify":"^0.5.0","gulp-concat":"^2.2.0","gulp-if":"^1.2.1","gulp-livereload":"^2.0.0","gulp-uglify":"^0.3.0","mocha":"^1.20.0","tiny-lr":"0.0.7","underscore":"^1.7.0"},"gitHead":"fed2e7f34ad8069e4ed71ef9cc0964ee8a9f31a1","_id":"model-structure@1.0.0","_shasum":"5fa4e29814ee5b6fb59c5d07bec6eb7c945a1810","_from":".","_npmVersion":"1.4.23","_npmUser":{"name":"marcosrava","email":"marcosrava@gmail.com"},"maintainers":[{"name":"marcosrava","email":"marcosrava@gmail.com"}],"dist":{"shasum":"5fa4e29814ee5b6fb59c5d07bec6eb7c945a1810","tarball":"http://registry.npmjs.org/model-structure/-/model-structure-1.0.0.tgz"}}
42 error new={"author":{"name":"Marcos Rava","email":"marcosrava@gmail.com"},"contributors":[{"name":"Fabrício Ferrari de Campos","email":"ffc.fabricio@gmail.com","url":"http://vizir.com.br/"},{"name":"Romário da Silva Lima","email":"r.lima616@gmail.com","url":"http://airroom.com.br/"}],"name":"model-structure","version":"1.0.0","repository":{"url":"https://github.com/MarcosRava/model-structure/"},"main":"./index.js","bugs":{"url":"https://github.com/MarcosRava/model-structure/issues"},"keywords":["swagger","models","schema","db-migrate"],"description":"Models based on schema","dependencies":{"async":"^0.9.0","async-validate":"^0.1.20","db-migrate":"^0.7.1","extend":"^1.2.1","moment":"^2.6.0"},"scripts":{"test":"mocha","build":"gulp build","cover":"./node_modules/mocha/bin/mocha -R html-cov --require blanket > coverage.html"},"engines":{"node":"*"},"config":{"blanket":{"data-cover-never":"node_modules","pattern":"src"}},"devDependencies":{"blanket":"^1.1.6","expect.js":"^0.3.1","gulp":"^3.7.0","gulp-browserify":"^0.5.0","gulp-concat":"^2.2.0","gulp-if":"^1.2.1","gulp-livereload":"^2.0.0","gulp-uglify":"^0.3.0","mocha":"^1.20.0","tiny-lr":"0.0.7","underscore":"^1.7.0"},"readme":"#Model Structure\u000a\u000a`model-structure` helps you to create Models based on a Schema's Object. :godmode:\u000a\u000aIt can:\u000a\u000a* Set a custom repository to create, update, get and delete\u000a* Get Swagger models\u000a* Get db-migrate JSON\u000a* Nested objects support (validations too!)\u000a* Call validations before create, update or standalone\u000a* Custom async validations based on Schema\u000a* Custom validation messages, by validation or attribute\u000a\u000a---\u000a\u000a\u000a1. [Installation](#installation)\u000a2. [Usage](#usage)\u000a  - [Schema Declaration](#schema-declaration)\u000a  - [Using Repositories](#using-repositories)\u000a  - [Validating Models](#validating-models)\u000a  - [Swagger](#swagger)\u000a  - [Node DB Migrate](#node-db-migrate)\u000a  - [Messages](#messages)\u000a  - [Data/Object Definition](#dataobject-definition)\u000a    -  [Data Types](#data-types)\u000a    -  [ENUM Object](#enum-object)\u000a    -  [Model Ref Object](#model-ref-object)\u000a3. [Browser Support](#browser-support)\u000a4. [Running Tests](#running-tests)\u000a\u000a## Installation\u000a```sh\u000a$ npm install model-structure\u000a```\u000a\u000a## `Model.init(constructor, schema)`;\u000a Used to bind prototype properties in object constructor\u000a\u000a * `constructor` - Object constructor\u000a * `schema` - object [schema](#schema-declaration) with properties details\u000a\u000a## `Model.instantiate(instance, data, options)`;\u000a Used inside object constructor\u000a\u000a * `instance` - `this` reference\u000a * `data` - object data attributes\u000a * `options` - Model options\u000a   - ### options\u000a\u000a     - `repository` - [Repository Object](#using-repositories) - contains object with crud functions\u000a     - `validator`- [Validators Array](#custom-validations) - an array with validators to be used against object data\u000a\u000a## Usage\u000a[Sample object](/test/fixtures/models/customer.js)\u000a```js\u000a\u000avar Model = require('model-structure');\u000a\u000afunction Lead(args, options) {\u000a  Model.instantiate(this, args, options);\u000a}\u000a\u000avar schema = {\u000a  properties: {\u000a    \"id\" : {\u000a      \"type\": \"integer\",\u000a      \"primaryKey\": true,\u000a      \"autoIncrement\": true\u000a    },\u000a    \"name\" : {\u000a      \"type\": \"string\",\u000a      \"maximum\": 30\u000a    },\u000a    \"email\" : {\u000a      \"type\": \"email\",\u000a      \"message\": \"%s field is not a valid email!!\",\u000a    },\u000a  }\u000a}\u000aModel.init(Lead, schema);\u000a\u000a\u000avar data = {name: 'Kurosaki Ichigo', email: 'ichi@soulsociety.com'};\u000avar lead = new Lead(data);\u000alead.create(function(err, leadResponse) {\u000a  // return created lead\u000a});\u000a```\u000a\u000a### Schema Declaration\u000a\u000a```js\u000avar schema = {};\u000a```\u000a\u000a#### `schema.messages = {}`\u000a\u000aSchema error messages based on [Data Type](#data-types).\u000a\u000a```js\u000aschema.messages = {\u000a  \"integer\": \"Integer error message\",\u000a  \"float\": \"Float error message\",\u000a}\u000a```\u000a\u000a#### `schema.notInstantiate = false`\u000a\u000aIf `true`, gets exactly the return data from Repository.\u000a\u000a#### `schema.properties = {}`\u000a\u000aProperty | Type | Description\u000a-------- | ---- | -----------\u000a`type` |  [`String - Data Type`](#data-types) | **Required**.\u000a`primaryKey` | `Boolean` |\u000a`autoIncrement` | `Boolean` |\u000a`minimum` | `Number` | If `type` is a `Number`, minimum value. If it's a `String`, minimum length.\u000a`maximum` | `Number` | If `type` is a `Number`, maximum value. If it's a `String`, maximum length.\u000a`values` | [`Object - ENUM`](#enum-object) | .\u000a`model` | [`Object - Model Ref`](#model-ref-object) |\u000a\u000a```js\u000aschema.properties = {\u000a  \"id\": {\u000a    \"type\": \"integer\",\u000a    \"primaryKey\": true,\u000a    \"autoIncrement\": true\u000a  }\u000a}\u000a```\u000a\u000a### Using Repositories\u000a\u000aThe Model calls repository's functions passing object with `this` context.\u000a\u000a```js\u000avar datas = {};\u000a// Simple repository to use memory to save data\u000a\u000afunction Repository() {\u000a  Repository.prototype.create = function create(callback) {\u000a    this.id = new Date().getTime();\u000a    datas[this.id] = this;\u000a    if (typeof callback === 'function') callback(null, this);\u000a  };\u000a\u000a  Repository.prototype.get = function get(args, callback) {\u000a    var data = [];\u000a    for (var i in datas) data.push(JSON.parse(JSON.stringify(datas[i])));\u000a    callback(null, data);\u000a  };\u000a\u000a  Repository.prototype.load = function load(args, callback) {\u000a    args = args || {};\u000a    var data = args.data || {};\u000a    if (args.id) {\u000a      data = datas[args.id];\u000a    }\u000a    callback(null, data);\u000a  };\u000a\u000a  Repository.prototype.update = function update(callback) {\u000a    datas[this.id] = this;\u000a    if (typeof callback === 'function') callback(null, this);\u000a  };\u000a\u000a  Repository.prototype.destroy = function destroy(callback) {\u000a    delete datas[this.id];\u000a    if (typeof callback === 'function') callback(null, this);\u000a  };\u000a}\u000a\u000avar data = {name: 'Kurosaki Ichigo', email: 'ichi@soulsociety.com'};\u000avar options = {};\u000aoptions.repository = new Repository();\u000avar lead = new Lead(data, options);\u000alead.create(function(err, leadResponse) {\u000a  lead.load({id:lead.id}, function (err, secondResponse) {\u000a    // get saved lead;\u000a  });\u000a});\u000a```\u000a\u000a### Validating Models\u000aThe validations methods are fired before `create` or `update` methods. But you may trigger it directly:\u000a```js\u000avar data = {name: 'Kurosaki Ichigo', email: 'ichi@soulsociety.com'};\u000aoptions.repository = new Repository();\u000avar lead = new Lead(data, options);\u000alead.isValid(function(err, fields) {\u000a\u000a});\u000a```\u000a\u000a### Custom Validations\u000a```js\u000avar Validator = Model.Validator;\u000avar validators = [];\u000avar validator = new Validator({validate: firstLetterLowerCase});\u000avar expect = require('expect.js');\u000avar error = {message: \"Name field must be first letter in lowercase\", field: 'name'};;\u000a\u000afunction firstLetterLowerCase(done) {\u000a  if (this.name[0].toLowerCase() === this.name[0]) {\u000a    done();\u000a  } else {\u000a    done(error);\u000a  }\u000a}\u000avalidators.push(validator);\u000alead.isValid(validators, function (err) {\u000a  expect(err[0].field).to.be(error.field);\u000a  expect(err[0].message).to.contain(error.message);\u000a  done();\u000a});\u000a// OR\u000aValidator.validate(lead, validators, function (err) {\u000a  expect(err[0].field).to.be(error.field);\u000a  expect(err[0].message).to.contain(error.message);\u000a  done();\u000a});\u000a```\u000a//TODO More examples\u000a\u000a### Swagger\u000a\u000aGet Swagger Model schema\u000a```js\u000avar swaggerSchema = {\u000a  \"apiVersion\": \"0.0.1\",\u000a  \"swaggerVersion\": \"1.2\",\u000a  \"basePath\": \"http://localhost:1214\",\u000a  \"resourcePath\": \"/lead\",\u000a  \"apis\": [{\u000a    \"path\": \"/lead/\",\u000a    \"operations\": [{\u000a      \"description\": \"Get all leads\",\u000a      \"notes\": \"Returns all leads.\",\u000a      \"summary\": \"Get leads\",\u000a      \"method\": \"GET\",\u000a      \"type\": \"Lead\",\u000a      \"nickname\": \"getAllLeads\"\u000a    }]\u000a  }],\u000a  \"models\": Lead.access('swagger')\u000a  }\u000a}\u000a```\u000a\u000a### Node DB Migrate\u000aIf you are using [node-db-migrate](https://github.com/kunklejr/node-db-migrate) to manager your migrations, you can get the migration schema directly from `Model.getSchema('dbMigrate', [YOUR_SCHEMA])`.\u000a```js\u000a  var schema = {\u000a    \"properties\": {\u000a      \"id\" : {\u000a        \"type\": \"integer\",\u000a        \"primaryKey\": true,\u000a        \"autoIncrement\": true\u000a      },\u000a      \"name\" : {\u000a        \"type\": \"string\",\u000a        \"minimum\": 3,\u000a        \"maximum\": 30\u000a      },\u000a      \"email\" : {\u000a        \"type\": \"email\",\u000a        \"required\": true,\u000a        \"unique\": true,\u000a        \"minimum\": 7\u000a      }\u000a    }\u000a  }\u000a  Model.getSchema('dbMigrate', schema); // returns the node-db-migrate schema\u000a```\u000a\u000a### Messages\u000a\u000aAdd custom error messages to field or validation\u000a\u000a```js\u000a  var expect = require('expect.js');\u000a  var lead = new Lead({id:\"not a valid integer\"});\u000a  Model.addMessages('pt-BR', {types: {integer: \"%s não é um inteiro\"}});\u000a  Model.setLocale('pt-BR');\u000a  lead.isValid(function (err) {\u000a    expect(err[0].field).to.be('id');\u000a    expect(err[0].message).to.contain('id não é um inteiro');\u000a    Model.setLocale('en');\u000a    lead.isValid(function (err2) {\u000a      expect(err2[0].field).to.be('active');\u000a      expect(err2[0].message).to.contain('id is not an integer');\u000a    });\u000a  });\u000a\u000a```\u000a\u000a### Data/Object Definition\u000a\u000a#### Data Types\u000a\u000aCurrently Supported Datatypes:\u000a\u000a* `String`\u000a* `Char`\u000a* `Decimal`\u000a* `Float`\u000a* `Integer`\u000a* `Boolean`\u000a* `Date`\u000a* `Datetime`\u000a* `Enum`\u000a* `Array`\u000a* `Email`\u000a* `Nested Objects`\u000a\u000a#### ENUM Object\u000a\u000aProperty | Type | Description\u000a-------- | ---- | -----------\u000a`ref` | `Array/Object` | Reference Values\u000a`type` | [`String - Data Type`](#data-types) |\u000a\u000a#### Model Ref Object\u000a\u000aProperty | Type | Description\u000a-------- | ---- | -----------\u000a`ref` | `Object - Model Structure` | A `Model Structure` instance\u000a\u000a## Browser Support\u000a\u000aYou can use on client-side too!\u000a\u000a![IE](https://cloud.githubusercontent.com/assets/398893/3528325/20373e76-078e-11e4-8e3a-1cb86cf506f0.png) | ![Chrome](https://cloud.githubusercontent.com/assets/398893/3528328/23bc7bc4-078e-11e4-8752-ba2809bf5cce.png) | ![Firefox](https://cloud.githubusercontent.com/assets/398893/3528329/26283ab0-078e-11e4-84d4-db2cf1009953.png) | ![Opera](https://cloud.githubusercontent.com/assets/398893/3528330/27ec9fa8-078e-11e4-95cb-709fd11dac16.png) | ![Safari](https://cloud.githubusercontent.com/assets/398893/3528331/29df8618-078e-11e4-8e3e-ed8ac738693f.png)\u000a--- | --- | --- | --- | ---\u000aIE 9+ ✔ | Latest ✔ | Latest ✔ | Latest ✔ | Latest ✔\u000a\u000a## Running Tests\u000a\u000a  To run the test suite, first invoke the following command within the repo, installing the development dependencies:\u000a\u000a```bash\u000a$ npm install\u000a```\u000a\u000a  Then run the tests:\u000a\u000a```bash\u000a$ npm test\u000a```\u000a\u000a  To run the coverage report:\u000a\u000a```bash\u000a$ npm run cover\u000a```\u000a","readmeFilename":"README.md","gitHead":"fed2e7f34ad8069e4ed71ef9cc0964ee8a9f31a1","_id":"model-structure@1.0.0","_shasum":"3ee4d3d8c04bb323efe074a3e40d93757ecc3dbb","_from":".","_npmVersion":"1.4.23","_npmUser":{"name":"marcosrava","email":"marcosrava@gmail.com"},"maintainers":[{"name":"marcosrava","email":"marcosrava@gmail.com"}],"dist":{"shasum":"3ee4d3d8c04bb323efe074a3e40d93757ecc3dbb","tarball":"http://registry.npmjs.org/model-structure/-/model-structure-1.0.0.tgz"}}: model-structure
42 error     at RegClient.<anonymous> (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:300:14)
42 error     at Request._callback (/usr/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:238:65)
42 error     at Request.self.callback (/usr/lib/node_modules/npm/node_modules/request/request.js:123:22)
42 error     at Request.emit (events.js:98:17)
42 error     at Request.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:893:14)
42 error     at Request.emit (events.js:117:20)
42 error     at IncomingMessage.<anonymous> (/usr/lib/node_modules/npm/node_modules/request/request.js:844:12)
42 error     at IncomingMessage.emit (events.js:117:20)
42 error     at _stream_readable.js:943:16
42 error     at process._tickCallback (node.js:419:13)
43 error If you need help, you may report this *entire* log,
43 error including the npm and node versions, at:
43 error     <http://github.com/npm/npm/issues>
44 error System Linux 3.13.0-35-generic
45 error command "/usr/bin/node" "/usr/bin/npm" "publish"
46 error cwd /home/likewise-open/OCTO/mvieira/workspace/marcosrava/model-structure
47 error node -v v0.10.31
48 error npm -v 1.4.23
49 verbose exit [ 1, true ]
